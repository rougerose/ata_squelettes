var Atlas = (function (exports) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var config = {
    markers: {
      size: {
        xs: 34,
        s: 44,
        m: 54,
        l: 64,
        xl: 74,
        xxl: 84
      }
    }
  };

  // import { gsap } from "gsap";
  // import { Draggable } from "gsap/Draggable";
  // gsap.registerPlugin(Draggable);
  var Modal = /*#__PURE__*/function () {
    function Modal(id) {
      _classCallCheck(this, Modal);

      this.id = id;
      this._modal = document.getElementById(id);
      this._btn = this._modal.querySelector("button");
      this._clickListener = this.clickToggleModal.bind(this);

      this._btn.addEventListener("click", this.clickToggleModal.bind(this));

      this.isOpen = false; // console.log(this._height, this._bounds);

      /*
      document.body.scrollHeight - this._modal.offsetTop
      */
      // let that = this;
      // Draggable.create("#" + this.id, {
      // 	type: "y",
      // 	bounds: { minY: 50, maxY: -125 },
      // 	// edgeResistance: 0.5,
      // 	dragResistance: 0.7,
      // 	zIndexBoost: false,
      // 	liveSnap: true,
      // 	onMove: function () {
      // 		console.log(this.y);
      // 	},
      // 	onDragEnd: function () {
      // 		if (this.y <= -10) {
      // 			that.toggleModal("open");
      // 		} else if (this.y >= 5) {
      // 			that.toggleModal("close");
      // 		}
      // 	},
      // });
    }

    _createClass(Modal, [{
      key: "clickToggleModal",
      value: function clickToggleModal(event) {
        event.preventDefault();
        console.log("toggleModal", this, event);

        if (!this.isOpen) {
          return;
        }

        console.log(event.target, this._modal.dataset.visibilityState);

        if (this._modal.dataset.visibilityState === "preview") {
          console.log("toggle Preview -> All");
          this._modal.dataset.visibilityState = "all";
          this._modal.style.top = 0;

          this._modal.removeEventListener("click", this._clickListener);
        } else if (this._modal.dataset.visibilityState === "all") {
          console.log("toggle All -> Close"); // this._modal.dataset.visibilityState = "";
          // this._modal.style.top = "100%";

          this.close();
        }
      }
    }, {
      key: "open",
      value: function open(data) {
        var _this = this;

        // si déjà ouvert, fermer avant de charger le html
        if (this.isOpen) {
          this.close().then(function () {
            _this._buildModal(data);
          });
        } else {
          this._buildModal(data);
        }

        this.isOpen = true;
      }
    }, {
      key: "close",
      value: function close() {
        this.isOpen = false;
        var modal = this._modal;

        if (this._modal.dataset.visibilityState === "preview") {
          this._modal.removeEventListener("click", this._clickListener);
        } // https://gist.github.com/davej/44e3bbec414ed4665220


        return new Promise(function (resolve) {
          modal.style.top = "100%";
          modal.dataset.visibilityState = "";

          var transitionendListener = function transitionendListener(event) {
            modal.removeEventListener("transitionend", transitionendListener);
            resolve();
          };

          modal.addEventListener("transitionend", transitionendListener);
        });
      }
    }, {
      key: "_buildModal",
      value: function _buildModal(data) {
        var _this2 = this;

        var properties = data.properties; // Convertir le json en fonction du gabarit html

        var html = this._createHTML(properties); // Ajouter le contenu html à conteneur


        var htmlContainer = this._modal.querySelector(".mp-Modal_Content");

        htmlContainer.firstElementChild.innerHTML = html; // Avant d'afficher vérifier que les images de la modale
        // sont chargées(via la lib imagesLoaded).
        // Cela permet de calculer une hauteur de header (preview) plus précise.

        imagesLoaded(this._modal, function () {
          var previewHeight = _this2._calcPreviewHeight();

          _this2._modal.style.top = previewHeight + "px";
          _this2._modal.dataset.visibilityState = "preview";
        });

        this._modal.addEventListener("click", this._clickListener);
      }
    }, {
      key: "_calcPreviewHeight",
      value: function _calcPreviewHeight() {
        return 0; // let parentHeight = this._modal.offsetParent.offsetHeight;
        // let content = this._modal.children[1];
        // let bodyProfile = content.children[0].children[1].firstElementChild;
        // let padding = 20;
        // let previewHeight = parentHeight - (bodyProfile.offsetTop + padding);
        // return previewHeight;
      }
    }, {
      key: "_createHTML",
      value: function _createHTML(data) {
        var profileName = "\n\t\t\t<div class=\"mp-OrgProfile_Name\">\n\t\t\t\t<h1>".concat(data.nom, "</h1>\n\t\t\t\t<p class=\"mp-OrgProfile_Address\">\n\t\t\t\t\t").concat(data.voie ? "<span>".concat(data.voie, "</span>") : "", "\n\t\t\t\t\t").concat(data.complement ? "<span>".concat(data.complement, "</span>") : "", "\n\t\t\t\t\t<span>").concat(data.code_postal, " ").concat(data.ville, "</span>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t");
        var profileLogo = "\n\t\t\t<div class=\"mp-OrgProfile_BagdeContainer\">\n\t\t\t\t<figure class=\"mp-OrgProfile_Badge\">\n\t\t\t\t\t<img class=\"mp-OrgProfile_Logo\" src=\"".concat(data.logo, "\" alt=\"\">\n\t\t\t\t</figure>\n\t\t\t</div>\n\t\t");
        var profileActivites = "";

        if (data.activites) {
          var activitesArray = data.activites.split("|");
          profileActivites = "\n\t\t\t\t<h2>Activit\xE9s</h2>\n\t\t\t\t<ul class=\"mp-OrgProfile_List\">\n\t\t\t\t".concat(activitesArray.map(function (activite, index) {
            return "<li class=\"mp-OrgProfile_ListItem\">".concat(activite, "</li>");
          }).join(""), "\n\t\t\t\t</ul>\n\t\t\t");
        }

        var profileOnline = "";

        if (data.url_site || data.facebook || data.twitter || data.instagram) {
          profileOnline = "\n\t\t\t<h2>En ligne</h2>\n\t\t\t".concat(data.url_site ? "<p class=\"mp-OrgProfile_Online\">\n\t\t\t<a class=\"mp-OrgProfile_WebLink\" href=\"".concat(data.url_site, "\">").concat(data.url_site, "</a>\n\t\t\t</p>") : "", "\n\t\t\t<p class=\"mp-OrgProfile_Online mp-OrgProfile_Online-social\">\n\t\t\t\t").concat(data.facebook ? "<a class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-fb mp-OrgProfile_SocialLink-on\" href=\"".concat(data.facebook, "\"> </a>") : "<span class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-fb mp-OrgProfile_SocialLink-off\"> </span>", "\n\t\t\t\t").concat(data.twitter ? "<a class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-tw mp-OrgProfile_SocialLink-on\" href=\"".concat(data.twitter, "\"> </a>") : "<span class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-tw mp-OrgProfile_SocialLink-off\"> </span>", "\n\t\t\t\t").concat(data.instagram ? "<a class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-ig mp-OrgProfile_SocialLink-on\" href=\"".concat(data.instagram, "\"> </a>") : "<span class=\"mp-OrgProfile_SocialLink mp-OrgProfile_SocialLink-ig mp-OrgProfile_SocialLink-off\"> </span>", "\n\t\t\t</p>\n\t\t\t");
        }

        return "\n\t\t<article class=\"mp-OrgProfile\">\n\t\t\t<header class=\"mp-OrgProfile_Header\">\n\t\t\t\t".concat(profileName, "\n\t\t\t\t").concat(profileLogo, "\n\t\t\t</header>\n\t\t\t<section class=\"mp-OrgProfile_Body\">\n\t\t\t\t<div class=\"mp-OrgProfile_Informations\">\n\t\t\t\t\t").concat(profileActivites, "\n\t\t\t\t\t").concat(profileOnline, "\n\t\t\t\t</div>\n\t\t\t\t<div class=\"mp-OrgProfile_BagdeContainer\">\n\t\t\t\t\t<figure class=\"mp-OrgProfile_Badge mp-OrgProfile_Badge-membreFraap\">\n\t\t\t\t\t\t<img class=\"mp-OrgProfile_LogoMembreFraap\"\n\t\t\t\t\t\t\tsrc=\"").concat(data.membre_fraap_logo, "\"\n\t\t\t\t\t\t\tclass=\"mp-OrProfile_FraapLogo\" alt=\"").concat(parseInt(data.membre_fraap) ? "Cette association est membre de la FRAAP" : "Cette association n'est pas membre de la FRAAP", "\">\n\t\t\t\t\t\t<figcaption class=\"mp-OrgProfile_Tooltip\">").concat(parseInt(data.membre_fraap) ? "Cette association est membre de la <a href=\"https://fraap.org\">FRAAP</a>" : "Cette association n'est pas membre de la <a href=\"https://fraap.org\">FRAAP</a>", "</figcaption>\n\t\t\t\t\t</figure>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</article>\n\t\t");
      }
    }]);

    return Modal;
  }();

  var Map = /*#__PURE__*/function () {
    function Map(mapObj) {
      _classCallCheck(this, Map);

      this._map = mapObj;
      this._modal = new Modal("Modal");
      this._json_url;
      this.body = document.body;
    }

    _createClass(Map, [{
      key: "setupZoom",
      value: function setupZoom() {
        L.control.zoom({
          position: "topleft"
        }).addTo(this._map);
      } // Fonction reprise et adaptée de loadData() API de GIS
      // mais il s'agit ici d'appeler un traitement spécifique des données json

    }, {
      key: "loadJson",
      value: function loadJson() {
        if (typeof this._map.options.json_points !== "undefined" && this._map.options.json_points.url.length) {
          var args = {};
          jQuery.extend(true, args, this._map.options.json_points.env);
          args.objets = this._map.options.json_points.objets;

          if (typeof this._map.options.json_points.limit !== "undefined") {
            args.limit = this._map.options.json_points.limit;
          }

          var self = this;
          this._json_url = this._map.options.json_points.url;
          jQuery.getJSON(self._json_url, args, function (data) {
            if (data) {
              self.parseJson(data);
            }
          });
        }
      } // Adaptation de la fonction parseGeoJson de GIS
      // afin de personnaliser les clusters.

    }, {
      key: "parseJson",
      value: function parseJson(data) {
        if (!this._map.options.cluster) {
          parseJsonFeatures(data);
        } else {
          var options = this._map.options.clusterOptions;

          options.iconCreateFunction = function (cluster) {
            var size, variant, count;
            count = cluster.getChildCount();

            if (count <= 3) {
              variant = "-xs";
              size = config.markers.size.xs;
            } else if (count <= 10) {
              variant = "-s";
              size = config.markers.size.s;
            } else if (count <= 50) {
              variant = "-m";
              size = config.markers.size.m;
            } else if (count <= 100) {
              variant = "-l";
              size = config.markers.size.l;
            } else if (count <= 250) {
              variant = "-xl";
              size = config.markers.size.xl;
            } else {
              variant = "-xxl";
              size = config.markers.size.xxl;
            }

            return new L.DivIcon({
              html: "<div><span>" + count + "</span></div>",
              className: "mp-MarkerCluster mp-MarkerCluster" + variant,
              iconSize: new L.Point(size, size)
            });
          };

          this._map.markerCluster = L.markerClusterGroup(options).addTo(this._map);
          var markers = [];
          var autres = {
            type: "FeatureCollection",
            features: []
          };

          for (var index = 0; index < data.features.length; index++) {
            var feature = data.features[index];

            if (feature.geometry.type == "Point" && feature.geometry.coordinates[0]) {
              var marker = L.marker([feature.geometry.coordinates[1], feature.geometry.coordinates[0]]); // Déclarer l'icone du point en utilisant l'API GIS

              this._map.setGeoJsonFeatureIcon(feature, marker); // Gérer le click


              this._clickMarker(marker, "on");

              marker.feature = feature;
              markers.push(marker);
            } else {
              autres.features.push(feature);
            }
          }

          this._map.markerCluster.addLayers(markers);

          this.parseJsonFeatures(autres);
        }
      }
    }, {
      key: "parseJsonFeatures",
      value: function parseJsonFeatures(data) {
        if (data.features && data.features.length > 0) {
          var self = this;
          var geojson = L.geoJson("", {
            style: self._map.options.pathStyles ? self._map.options.pathStyles : function (feature) {
              if (feature.properties && feature.properties.styles) {
                return feature.properties.styles;
              } else {
                return "";
              }
            },
            onEachFeature: function onEachFeature(feature, layer) {
              // Icone du point
              if (feature.geometry.type == "Point") {
                self._map.setGeoJsonFeatureIcon(feature, layer);
              }
            },
            pointToLayer: function pointToLayer(feature, latlng) {
              var alt = "Marker";

              if (feature.properties.title) {
                alt = feature.properties.title;
              }

              var marker = L.marker(latlng, {
                alt: alt
              }); // click

              return marker;
            }
          }).addData(data).addTo(self._map);

          if (self._map.options.autocenterandzoom) {
            var options = {
              maxZoom: 10
            };

            self._map.fitBounds(geojson.getBounds(), options);
          }

          if (typeof self._map.geojsons == "undefined") {
            self._map.geojsons = [];
          }

          self._map.geojsons.push(geojson);
        }
      } // Pour éviter un temps de chargement très long de la carte,
      // lors de l'affichage de la page,
      // le marqueur ne contient que les données "associations"
      // (nom, site, logo). Il s'agit ici de collecter
      // le complément : adresse, réseaux sociaux, activités.
      // Puis d'ouvrir la fenêtre modale de consultation des infos
      // de l'association.

    }, {
      key: "onClickMarker",
      value: function onClickMarker(event) {
        var map = this;
        var args = {
          objets: "association",
          id_association: event.target.feature.properties.id_association
        };
        jQuery.getJSON(map._json_url, args, function (data) {
          if (data && data.features.length == 1) {
            var modal = map._modal;
            modal.open(data.features[0]); // if (modal.close()) {
            // 	if (modal.parseContent(data.features[0])) {
            // 		map._modal.open();
            // 	}
            // }
          }
        });
      }
    }, {
      key: "_clickMarker",
      value: function _clickMarker(marker, on) {
        if (on === "on") {
          L.DomEvent.on(marker, "click", this.onClickMarker, this);
        } else {
          L.DomEvent.off(marker, "click", this.onClickMarker, this);
        }
      }
    }, {
      key: "handler",
      value: function handler(event) {
        console.log(this, event); // let map = this;
        // map.body.removeEventListener("transitionend", map.handler.bind(map, event.target));
        // this.body.removeEventListener("transitionend", map.handler.bind(map, event.target));
      }
    }]);

    return Map;
  }();

  var init = function init(mapObj) {
    var map = new Map(mapObj);
    map.setupZoom();
    map.loadJson();
  };

  exports.init = init;

  return exports;

}({}));
